package tools;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.List;

public abstract class FileGeneratorTool implements Iterator<String> {

  protected List<String> lines;
  protected int currentLine;

  public FileGeneratorTool(List<String> lines) throws IOException {
    this.lines = lines;
    this.currentLine = 0;
  }

  protected abstract String generateFileContent() throws IOException;

  public abstract Path getGeneratedFilePath();

  @Override
  public boolean hasNext() {
    return this.currentLine < this.lines.size();
  }

  @Override
  public String next() {
    return this.lines.get(this.currentLine++);
  }

  public void writeToFile(Path filePath) throws IOException {
    File file = filePath.toFile();
    System.out.println(String.format("Generating file %s", file.getName()));

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
      writer.write(this.generateFileContent());
    }
  }

  protected String autoGeneratedWarning() {
    return String.join("",
        List.of(this.formatString(0, 1, "/**"),
            this.formatString(0, 1, " * This file is automatically generated"),
            this.formatString(0, 1,
                " * Do not manually update! (Use the CompilerTools to regenerate.)"),
            this.formatString(0, 1, " **/")));
  }

  protected String formatString(int tabCount, String content) {
    return this.formatString(tabCount, 0, content);
  }

  protected String formatString(int tabCount, int newLinesAfter, String content) {
    StringBuffer buffer = new StringBuffer();

    if (tabCount > 0) {
      buffer.append("  ".repeat(tabCount));
    }

    buffer.append(content);

    if (newLinesAfter > 0) {
      buffer.append(System.lineSeparator().repeat(newLinesAfter));
    }

    return buffer.toString();
  }
}
