package tools.lexer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;

import tools.FileGeneratorTool;

public class SymbolTableGenerator extends FileGeneratorTool {

    public SymbolTableGenerator() throws IOException {
        super();
    }

    @Override
    protected void generate() throws IOException {
        File file = Path.of("src", "lexer", "daos", "SymbolTable.java").toFile();
        System.out.println(String.format("Generating file %s", file.getName()));

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(String.join("", List.of(
                    this.formatString(0, 2, "package lexer.daos;"),
                    this.formatString(0, 1, "import java.util.Map;"),
                    this.formatString(0, 2, "import java.util.HashMap;"),
                    this.autoGeneratedWarning(),
                    this.formatString(0, 1, "public class SymbolTable {"),
                    this.formatString(1, 2, "private static Map<String, Symbol> symbols;"),
                    this.formatString(1, 1, "static {"),
                    this.formatString(2, 2, "symbols = new HashMap<>();"))));

            while (this.hasNext()) {
                String[] lineParts = this.next().split("\\s+");

                writer.write(this.formatString(2, 1, String.format(
                        "symbols.put(\"%s\", new Symbol(\"%s\", TokenKind.%s));",
                        lineParts[1], lineParts[1], lineParts[0])));
            }
            writer.write(this.formatString(1, 2, "}"));
            writer.write(this.symbolMethod());

            writer.write(this.formatString(0, 1, "}"));
        }
    }

    private String symbolMethod() {
        return String.join("", List.of(
                this.formatString(1, 1,
                        "public static Symbol symbol(String lexeme, TokenKind kind) {"),
                this.formatString(2, 2, "Symbol s = symbols.get(lexeme);"),
                this.formatString(2, 1, "if (s == null) {"),
                this.formatString(3, 1, "if (kind == TokenKind.BogusToken) {"),
                this.formatString(4, 1, "// bogus string so don't enter into symbol map"),
                this.formatString(4, 1, "return null;"),
                this.formatString(3, 2, "}"),
                this.formatString(3, 1, "s = new Symbol(lexeme, kind);"),
                this.formatString(3, 1, "symbols.put(lexeme, s);"),
                this.formatString(2, 2, "}"),
                this.formatString(2, 1, "return s;"),
                this.formatString(1, 1, "}")));
    }
}
