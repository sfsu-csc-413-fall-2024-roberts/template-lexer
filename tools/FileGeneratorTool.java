package tools;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Iterator;
import java.util.List;

public abstract class FileGeneratorTool implements Iterator<String> {

    private List<String> lines;
    private int index;

    public FileGeneratorTool(Path tokenFilePath) throws CompilerToolException {
        this.index = 0;

        try {
            this.lines = Files.readAllLines(tokenFilePath);
        } catch (IOException e) {
            throw new CompilerToolException(
                    String.format("Unable to read from specification file [%s]", tokenFilePath.toString()));
        }
    }

    public abstract void generate() throws CompilerToolException;

    @Override
    public boolean hasNext() {
        return this.index < this.lines.size();
    }

    @Override
    public String next() {
        return this.lines.get(this.index++);
    }

    protected String formatLine(String text) {
        return this.formatLine(text, 0, 0);
    }

    protected String formatLine(String text, int tabCount) {
        return this.formatLine(text, tabCount, 0);
    }

    protected String formatLine(String text, int tabCount, int newLineCount) {
        StringBuffer buffer = new StringBuffer();

        for (int tabs = 0; tabs < tabCount; tabs++) {
            buffer.append("    ");
        }

        buffer.append(text);

        for (int newLines = 0; newLines < newLineCount; newLines++) {
            buffer.append(System.lineSeparator());
        }

        return buffer.toString();
    }

    protected String getAutoGeneratedWarning() {
        return String.join("",
                List.of(
                        this.formatLine("/**", 0, 1),
                        this.formatLine(" * This file is automatically generated", 0, 1),
                        this.formatLine(" * Do not manually update! (Use the CompilerTools to regenerate.)", 0, 1),
                        this.formatLine(" **/", 0, 1)));
    }
}
