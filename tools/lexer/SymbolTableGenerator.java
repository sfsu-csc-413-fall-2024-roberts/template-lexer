package tools.lexer;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;

import tools.CompilerToolException;
import tools.FileGeneratorTool;

public class SymbolTableGenerator extends FileGeneratorTool {

    public static final String GENERATED_CLASS_NAME = "SymbolTable";

    public SymbolTableGenerator(Path specificationFile) throws CompilerToolException {
        super(specificationFile);
    }

    private String packageLine() {
        return this.formatLine(
                String.format(
                        "package %s.%s;",
                        "lexer",
                        "daos"),
                0, 2);
    }

    private String importLines() {
        return String.join("", Arrays.asList(
                this.formatLine("import java.util.Map;", 0, 1),
                this.formatLine("import java.util.HashMap;", 0, 2),
                this.formatLine(String.format(
                        "import %s.%s.%s;",
                        "lexer",
                        "daos",
                        GENERATED_CLASS_NAME), 0, 2)));
    }

    private String symbolMethod() {
        return String.join("", Arrays.asList(
                this.formatLine(String.format(
                        "public static Symbol symbol(String lexeme, TokenKind kind) {"), 1, 1),
                this.formatLine("Symbol s = symbols.get(lexeme);", 2, 2),
                this.formatLine("if (s == null) {", 2, 1),
                this.formatLine(String.format(
                        "if (kind == TokenKind.BogusToken) {"), 3, 1),
                this.formatLine("// bogus string so don't enter into symbol map", 4, 1),
                this.formatLine("return null;", 4, 1),
                this.formatLine("}", 3, 2),
                this.formatLine("s = new Symbol(lexeme, kind);", 3, 1),
                this.formatLine("symbols.put(lexeme, s);", 3, 1),
                this.formatLine("}", 2, 2),
                this.formatLine("return s;", 2, 1),
                this.formatLine("}", 1, 1)));
    }

    @Override
    public void generate() throws CompilerToolException {
        try (FileWriter writer = new FileWriter("src/lexer/daos/SymbolTable.java")) {

            writer.write(this.packageLine());
            writer.write(this.importLines());

            writer.write(this.getAutoGeneratedWarning());
            writer.write(this.formatLine(
                    String.format("public class %s {", GENERATED_CLASS_NAME), 0, 1));
            writer.write(this.formatLine("private static Map<String, Symbol> symbols;", 1, 2));
            writer.write(this.formatLine("static {", 1, 1));
            writer.write(this.formatLine("symbols = new HashMap<>();", 2, 2));

            while (this.hasNext()) {
                String[] lineParts = this.next().split("\\s+");

                writer.write(this.formatLine(String.format(
                        "symbols.put(\"%s\", new Symbol(\"%s\", TokenKind.%s));",
                        lineParts[1], lineParts[1], lineParts[0]), 2, 1));
            }

            writer.write(this.formatLine("}", 1, 2));
            writer.write(this.symbolMethod());

            writer.write(this.formatLine("}", 0, 1));
        } catch (IOException ioe) {
            throw new CompilerToolException(
                    String.format("Unable to create the %s class", GENERATED_CLASS_NAME));
        }
    }
}
